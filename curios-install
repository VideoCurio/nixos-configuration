#!/usr/bin/env bash

# Dialog driven CuriOS install script as NixOS package.
# Meant to be run during an NixOS ISO installation.
# !IMPORTANT! Run this script as sudo
# It will create 3 partitions for '/boot', '/' and a 8Go swap
# OR with --crypt option, it will create a 512Mo boot and a LUKS partition.
# The encrypted LUKS partition will contain LVM partitions for '/' (100Go), '/home' and a 8Go swap.
#
# Dependencies: dialog, parted, git.
# Test it with:
# nix-shell -p dialog parted git

#------------- Colors -------------#
readonly RED="\033[31;1m"          # Red and bold
readonly GREEN="\033[32;1m"        # Green and bold
readonly BLUE="\033[34;1m"         # Blue and bold
readonly GREY="\033[37;1m"         # Grey and bold
readonly YELLOW="\033[33;1;3m"     # Yellow, bold and italic
#readonly YELLOWBLK="\033[33;1;5m"  # Yellow, bold and slow blink
#readonly UNDL="\033[4m"            # Underlined
#readonly BOLD="\033[1m"            # Bold
readonly NC="\033[0m"              # No Color

#------------- Variables init
readonly SCRIPT_VERSION="0.4";
CURIOS_INSTALL_PATH=".";
CURIOS_SRC_PATH=".";
SCRIPT_PATH="$(dirname "$0")"
LANG_CHOICE=0;
PC_HOSTNAME="CuriOS";
SELECTED_DISK="";
SELECTED_LOCALE="en_US.UTF-8";
SELECTED_LOCALE_CONSOLE="us";
SELECTED_TZ="";
USERNAME="nixos";
FULLNAME="";
ENCRYPT_DISK=0;
DISK_LUKS_KEY="";
DISK_MIN_SIZE=40;
DISK_ROOT_MIN_SIZE=25;
SELECTED_ROOT_SIZE=80;
DISK_SIZE_UNIT="G";
GPU_VENDOR_DETECTED="";
GPU_INSTALL=0;
CONFIRM_INSTALL=0;
NIXOS_CONFIG_DIR="/mnt/etc/nixos";
DO_DOTFILES_INSTALL=1;
VERBOSE=0;
readonly DIALOG_OK=0
readonly DIALOG_CANCEL=1
#readonly DIALOG_HELP=2
#readonly DIALOG_EXTRA=3
#readonly DIALOG_ITEM_HELP=4
readonly DIALOG_ESC=255
readonly DIALOG_HEIGHT=0
readonly DIALOG_WIDTH=0
DIALOG_HELP_TITLE="<↕> Move cursor <Space> Select <Enter> Button activation 2*<Esc> Abort"
# Pre configured timezone based on user language - adjust to choose_lang() list order.
LOCALES_TZ=(
  "Etc/GMT+1"
  "US/Eastern"
  "Europe/London"
  "Europe/Paris"
  "Europe/Madrid"
  "Europe/Berlin"
  "Asia/Shanghai"
  "Asia/Tokyo"
  "Europe/Lisbon"
  "Europe/Moscow"
  "Europe/Rome"
  "Asia/Seoul"
  "Asia/Riyadh"
  "Europe/Amsterdam"
  "Europe/Warsaw"
  "Europe/Stockholm"
  "Europe/Istanbul"
  "Europe/Prague"
  "Europe/Berlin"
  "Europe/Budapest"
  "Europe/Oslo"
  "Asia/Jerusalem"
  "Europe/Kyiv"
  "Asia/Kolkata"
  "Europe/Athens"
)

#------------- Print help function
usage () {
  echo -e "CuriOS installer version ${SCRIPT_VERSION}
* Dialog interface for CuriOS install script *

${GREY}USAGE:${NC}
  curios-install [options]

${GREY}OPTIONS:${NC}
  ${GREY}-h, --help${NC}         Print this message.
  ${GREY}-v, --verbose${NC}      Print more information.
  ${GREY}--version${NC}          Print version number and exit."
  exit 0
}

#------------- Scripts arguments parse options
ARGS=$(getopt --longoptions="verbose,version,help" --options ":hv" --name "$0" -- "$@")
eval set -- "$ARGS"

while true; do
  case "$1" in
    -v | --verbose)
      VERBOSE=1
      shift
      ;;
    -h | --help)
      usage
      ;;
    --version)
      echo "$SCRIPT_VERSION"
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

if [ $VERBOSE -eq 1 ]; then
  echo -e "Script current path: ${SCRIPT_PATH}"
fi

#------------- Check curios-sources files
CURIOS_INSTALL_PATH=$(dirname "$(realpath "$(which curios-install)")")
CURIOS_SRC_PATH=$(realpath "$CURIOS_INSTALL_PATH"/../share/curios)
if [ $VERBOSE -eq 1 ]; then
  echo -e "Package store path: ${CURIOS_SRC_PATH}"
fi
if [ ! -f "$CURIOS_SRC_PATH"/configuration.nix ]; then
  echo -e "${RED}configuration.nix file not found!${NC}"
  exit 1
fi
if [ ! -f "$CURIOS_SRC_PATH"/settings.nix ]; then
  echo -e "${RED}settings.nix file not found!${NC}"
  exit 1
fi
if [ ! -f "$CURIOS_SRC_PATH"/user-me.nix ]; then
  echo -e "${RED}user-me.nix file not found!${NC}"
  exit 1
fi
if [ ! -d "$CURIOS_SRC_PATH"/modules/ ]; then
  echo -e "${RED}modules directory not found!${NC}"
  exit 1
fi
if [ ! -d "$CURIOS_SRC_PATH"/pkgs/ ]; then
  echo -e "${RED}pkgs directory not found!${NC}"
  exit 1
fi

#------------- Check dependencies
available() { command -v "$1" >/dev/null; }

if ! available git; then
  echo -e "${RED}git command not found!${NC}"
  exit 2
fi
if ! available parted; then
  echo -e "${RED}parted command not found!${NC}"
  exit 2
fi
if ! available cryptsetup; then
  echo -e "${RED}cryptsetup command not found!${NC}"
  exit 2
fi
if ! available mkfs; then
  echo -e "${RED}mkfs command not found!${NC}"
  exit 2
fi
if ! available dialog; then
  echo -e "${RED}dialog command not found!${NC}"
  exit 2
fi

#------------- Check internet connectivity
if nc -zw1 github.com 443; then
  echo -e "Internet connectivity: ${GREEN}Check${NC}"
else
  echo -e "${RED}No internet connectivity - an internet connection is required!${NC}"
  exit 1
fi

# This script must be run as root
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}This script MUST be run as root:${NC} sudo curios-install" >&2
  exit 1
fi

# A standard dialog message box, for printing error message
display_error() {
  dialog --title "\Zb\Z1!! Error\Zn" \
    --no-collapse \
    --clear \
    --colors \
    --msgbox "$1" $DIALOG_HEIGHT $DIALOG_WIDTH
}

#------------- Choose language
# See: https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes
choose_lang() {
  # Duplicate (make a backup copy of) file descriptor 1
  # on descriptor 3
  exec 3>&1
  # Generate dialog box in a subshell
  selection=$(dialog \
    --backtitle "System Information -- $DIALOG_HELP_TITLE" \
    --title "Locale" \
    --cancel-label "Exit" \
    --ok-label "Next" \
    --clear \
    --default-item "$SELECTED_LOCALE_CONSOLE" \
    --menu "Choose your language:" $DIALOG_HEIGHT $DIALOG_WIDTH 8 \
    "C" "No localization" \
    "us" "US English" \
    "gb" "British English" \
    "fr" "Français" \
    "es" "Español" \
    "de" "Deutsch" \
    "zh" "中文 (汉语) - Chinese (simplified)" \
    "hi" "हिन्दी - Hindi" \
    "ja" "日本語 - Japanese" \
    "pt" "Português" \
    "ru" "Русский язык - Russian" \
    "it" "Italiano" \
    "ko" "한국어 - Korean" \
    "ar" "اَلْعَرَبِيَّةُ Arabic" \
    "nl" "Nederlands" \
    "pl" "Polski" \
    "sv" "Svenska" \
    "tr" "Türkçe" \
    "cs" "Čeština" \
    "da" "Dansk" \
    "hu" "Magyar nyelv" \
    "no" "Norsk" \
    "he" "עברית Hebrew" \
    "uk" "Українська - Ukrainian" \
    "el" "Ελληνικά - Greek" \
    2>&1 1>&3)
  exit_status=$?
  # Close file descriptor 3
  exec 3>&-
  case $selection in
    C )
      SELECTED_LOCALE="C.UTF-8"
      SELECTED_LOCALE_CONSOLE="us"
      LANG_CHOICE=0
      ;;
    us )
      SELECTED_LOCALE="en_US.UTF-8"
      SELECTED_LOCALE_CONSOLE="us"
      LANG_CHOICE=1
      ;;
    gb )
      SELECTED_LOCALE="en_GB.UTF-8"
      SELECTED_LOCALE_CONSOLE="gb"
      LANG_CHOICE=2
      ;;
    fr )
      SELECTED_LOCALE="fr_FR.UTF-8"
      SELECTED_LOCALE_CONSOLE="fr"
      LANG_CHOICE=3
      ;;
    es )
      SELECTED_LOCALE="es_ES.UTF-8"
      SELECTED_LOCALE_CONSOLE="es"
      LANG_CHOICE=4
      ;;
    de )
      SELECTED_LOCALE="de_DE.UTF-8"
      SELECTED_LOCALE_CONSOLE="de"
      LANG_CHOICE=5
      ;;
    zh )
      SELECTED_LOCALE="zh_CN.UTF-8"
      SELECTED_LOCALE_CONSOLE="zh"
      LANG_CHOICE=6
      ;;
    ja )
      SELECTED_LOCALE="ja_JP.UTF-8"
      SELECTED_LOCALE_CONSOLE="ja"
      LANG_CHOICE=7
      ;;
    pt )
      SELECTED_LOCALE="pt_PT.UTF-8"
      SELECTED_LOCALE_CONSOLE="pt"
      LANG_CHOICE=8
      ;;
    ru )
      SELECTED_LOCALE="ru_RU.UTF-8"
      SELECTED_LOCALE_CONSOLE="ru"
      LANG_CHOICE=9
      ;;
    it )
      SELECTED_LOCALE="it_IT.UTF-8"
      SELECTED_LOCALE_CONSOLE="it"
      LANG_CHOICE=10
      ;;
    ko )
      SELECTED_LOCALE="ko_KR.UTF-8"
      SELECTED_LOCALE_CONSOLE="ko"
      LANG_CHOICE=11
      ;;
    ar )
      SELECTED_LOCALE="ar_SA.UTF-8"
      SELECTED_LOCALE_CONSOLE="ar"
      LANG_CHOICE=12
      ;;
    nl )
      SELECTED_LOCALE="nl_NL.UTF-8"
      SELECTED_LOCALE_CONSOLE="nl"
      LANG_CHOICE=13
      ;;
    pl )
      SELECTED_LOCALE="pl_PL.UTF-8"
      SELECTED_LOCALE_CONSOLE="pl"
      LANG_CHOICE=14
      ;;
    sv )
      SELECTED_LOCALE="sv_SE.UTF-8"
      SELECTED_LOCALE_CONSOLE="sv"
      LANG_CHOICE=15
      ;;
    tr )
      SELECTED_LOCALE="tr_TR.UTF-8"
      SELECTED_LOCALE_CONSOLE="tr"
      LANG_CHOICE=16
      ;;
    cs )
      SELECTED_LOCALE="cs_CZ.UTF-8"
      SELECTED_LOCALE_CONSOLE="cs"
      LANG_CHOICE=17
      ;;
    da )
      SELECTED_LOCALE="da_DK.UTF-8"
      SELECTED_LOCALE_CONSOLE="da"
      LANG_CHOICE=18
      ;;
    hu )
      SELECTED_LOCALE="hu_HU.UTF-8"
      SELECTED_LOCALE_CONSOLE="hu"
      LANG_CHOICE=19
      ;;
    no )
      SELECTED_LOCALE="no_NO.UTF-8"
      SELECTED_LOCALE_CONSOLE="no"
      LANG_CHOICE=20
      ;;
    he )
      SELECTED_LOCALE="he_IL.UTF-8"
      SELECTED_LOCALE_CONSOLE="he"
      LANG_CHOICE=21
      ;;
    uk )
      SELECTED_LOCALE="uk_UA.UTF-8"
      SELECTED_LOCALE_CONSOLE="uk"
      LANG_CHOICE=22
      ;;
    hi )
      SELECTED_LOCALE="hi_IN.UTF-8"
      SELECTED_LOCALE_CONSOLE="hi"
      LANG_CHOICE=23
      ;;
    el )
      SELECTED_LOCALE="el_GR.UTF-8"
      SELECTED_LOCALE_CONSOLE="el"
      LANG_CHOICE=24
      ;;
  esac
  # Act on exit status
  case $exit_status in
    "$DIALOG_OK")
      clear
      loadkeys $SELECTED_LOCALE_CONSOLE
      set_tz
      ;;
    "$DIALOG_CANCEL")
      clear
      echo "Program terminated." >&2
      exit 1
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
  esac
}

#------------- Choose timezone
# See: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
set_tz() {
  # Duplicate (make a backup copy of) file descriptor 1
  # on descriptor 3
  exec 3>&1
  # Generate dialog box in a subshell
  result=$(dialog \
    --backtitle "System Information -- $DIALOG_HELP_TITLE" \
    --title "Time Zone" \
    --cancel-label "Previous" \
    --ok-label "Next" \
    --clear \
    --no-collapse \
    --inputbox "Enter your timezone:" $DIALOG_HEIGHT $DIALOG_WIDTH "${LOCALES_TZ[$((LANG_CHOICE))]}" \
    2>&1 1>&3)
  exit_status=$?
  # Close file descriptor 3
  exec 3>&-
  # Act on exit status
  case $exit_status in
    "$DIALOG_OK")
      clear
      SELECTED_TZ=$result
      if ! [[ $SELECTED_TZ =~ ^[a-zA-Z0-9/_+\-]+$ ]]; then
        display_error "\Zb\Z1Invalid time zone!\Zn It could only contain alphanumerical, '/', '-', '+' or '_' characters like 'America/New_York' or 'Etc/GMT+2'."
        set_tz
      else
        set_hostname
      fi
      ;;
    "$DIALOG_CANCEL")
      clear
      choose_lang
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
  esac
}

#------------- Choose machine name
set_hostname() {
  # Duplicate (make a backup copy of) file descriptor 1
  # on descriptor 3
  exec 3>&1
  # Generate dialog box in a subshell
  result=$(dialog \
    --backtitle "System Information -- $DIALOG_HELP_TITLE" \
    --title "Network configuration" \
    --cancel-label "Previous" \
    --ok-label "Next" \
    --clear \
    --no-collapse \
    --inputbox "Enter this machine hostname:\n" $DIALOG_HEIGHT $DIALOG_WIDTH "$PC_HOSTNAME" \
    2>&1 1>&3)
  exit_status=$?
  # Close file descriptor 3
  exec 3>&-
  # Act on exit status
  case $exit_status in
    "$DIALOG_OK")
      clear
      PC_HOSTNAME=$result
      if ! [[ $PC_HOSTNAME =~ ^[[:alnum:].]+$ ]]; then
        display_error "\Zb\Z1Invalid hostname!\Zn It could only contain alphanumerical or '.' characters."
        set_hostname
      else
        set_username
      fi
      ;;
    "$DIALOG_CANCEL")
      clear
      set_tz
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
  esac
}

#------------- Choose username
set_username() {
  # Duplicate (make a backup copy of) file descriptor 1
  # on descriptor 3
  exec 3>&1
  # Generate dialog box in a subshell
  result=$(dialog \
    --backtitle "User Information -- $DIALOG_HELP_TITLE" \
    --title "Create user" \
    --cancel-label "Previous" \
    --ok-label "Next" \
    --clear \
    --no-collapse \
    --inputbox "Enter your username (id):" $DIALOG_HEIGHT $DIALOG_WIDTH "$USERNAME" \
    2>&1 1>&3)
  exit_status=$?
  # Close file descriptor 3
  exec 3>&-
  # Act on exit status
  case $exit_status in
    "$DIALOG_OK")
      clear
      USERNAME=$result
      if [ -z "$USERNAME" ]; then
        display_error "\Zb\Z1username cannot be empty.\Zn"
        set_username
      elif ! [[ $USERNAME =~ ^[[:alnum:]]+$ ]]; then
        display_error "\Zb\Z1Invalid username!\Zn It could only contain alphanumerical characters."
        set_username
      else
        set_fullname
      fi
      ;;
    "$DIALOG_CANCEL")
      clear
      set_hostname
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
  esac
}

#------------- Choose user full name
set_fullname() {
  # Duplicate (make a backup copy of) file descriptor 1
  # on descriptor 3
  exec 3>&1
  # Generate dialog box in a subshell
  result=$(dialog \
    --backtitle "User Information -- $DIALOG_HELP_TITLE" \
    --title "Create user" \
    --cancel-label "Previous" \
    --ok-label "Next" \
    --clear \
    --no-collapse \
    --inputbox "Enter your full name:" $DIALOG_HEIGHT $DIALOG_WIDTH "$FULLNAME" \
    2>&1 1>&3)
  exit_status=$?
  # Close file descriptor 3
  exec 3>&-
  # Act on exit status
  case $exit_status in
    "$DIALOG_OK")
      clear
      FULLNAME=$result
      if [ -z "$FULLNAME" ]; then
        FULLNAME="Dwight K. Schrute"
      fi
      if ! [[ $FULLNAME =~ ^[[:alnum:][:space:].]+$ ]]; then
        display_error "\Zb\Z1Invalid full name!\Zn it could only contain alphanumerical, '.' or space characters."
        set_fullname
      else
        display_password_info
      fi
      ;;
    "$DIALOG_CANCEL")
      clear
      set_username
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
  esac
}

#------------- User temp password info
display_password_info() {
  # on descriptor 3
  exec 3>&1
  result=$(dialog --backtitle "User Information" \
    --title "User Password" \
    --ok-label "Next" \
    --no-collapse \
    --clear \
    --colors \
    --msgbox "Your temporary password is set to \Zb\Z2changeme\Zn.\nChange it later from the desktop user interface or with the 'passwd' command in a terminal." $DIALOG_HEIGHT $DIALOG_WIDTH \
    2>&1 1>&3)
  exit_status=$?
  # Close file descriptor 3
  exec 3>&-
  # Act on exit status
  case $exit_status in
    "$DIALOG_OK")
      clear
      choose_disk
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
  esac
}

#------------- Choose install disk
choose_disk() {
  DIALOG_DEVICES_LIST=()
  DISK_NB=$(lsblk -A -pdn -o NAME | wc -l)
  i=1
  for device in $(lsblk -A -pdn -o NAME); do
    DISK_SIZE=$(lsblk -dn -o SIZE "$device")
    DISK_MODEL=$(lsblk -dn -o MODEL "$device")
    DIALOG_DEVICES_LIST+=("$device")
    DIALOG_DEVICES_LIST+=("$DISK_SIZE - $DISK_MODEL")
    # Select last disk by default
    if [ "$DISK_NB" -eq $i ]; then
      DIALOG_DEVICES_LIST+=("on")
    else
      DIALOG_DEVICES_LIST+=("off")
    fi
    ((i++))
  done
  # Duplicate (make a backup copy of) file descriptor 1
  # on descriptor 3
  exec 3>&1
  # Generate dialog box in a subshell
  selection=$(dialog \
    --backtitle "Disk Partition -- $DIALOG_HELP_TITLE" \
    --title "Installation on disk" \
    --cancel-label "Previous" \
    --ok-label "Next" \
    --clear \
    --radiolist "Choose which disk to install CuriOS on:" $DIALOG_HEIGHT $DIALOG_WIDTH 0 "${DIALOG_DEVICES_LIST[@]}" \
    2>&1 1>&3)
  exit_status=$?
  # Close file descriptor 3
  exec 3>&-
  # Act on exit status
  case $exit_status in
    "$DIALOG_OK")
      clear
      SELECTED_DISK=$selection
      choose_disk_encryption
      ;;
    "$DIALOG_CANCEL")
      clear
      set_fullname
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
  esac
}

choose_disk_encryption() {
  # on descriptor 3
  exec 3>&1
  result=$(dialog --backtitle "Disk Partition -- $DIALOG_HELP_TITLE" \
    --title "Full disk encryption (recommended)" \
    --no-collapse \
    --cancel-label "No" \
    --ok-label "Yes" \
    --clear \
    --colors \
    --insecure \
    --passwordbox "Should your disk be fully encrypted ?\n\Zb\Z4HIGHLY\Zn recommended.\nA passphrase will be needed during PC boot sequence.\nEnter your passphrase for the full disk encryption:" $DIALOG_HEIGHT $DIALOG_WIDTH \
    2>&1 1>&3)
  exit_status=$?
  # Close file descriptor 3
  exec 3>&-
  if [ $exit_status -eq $DIALOG_OK ]; then
    if [ ${#result} -le 7 ]; then
      display_error "\Zb\Z1Passphrase is too short!\Zn It should be at least 8 characters long."
      choose_disk_encryption
    elif ! [[ $result =~ ^[[:alnum:]]+$ ]]; then
      display_error "\Zb\Z1Invalid passphrase!\Zn it could only contain alphanumerical characters."
      choose_disk_encryption
    fi
  fi
  # Act on exit status
  case $exit_status in
    "$DIALOG_OK")
      clear
      ENCRYPT_DISK=1
      DISK_LUKS_KEY=$result
      confirm_disk_passphrase
      ;;
    "$DIALOG_CANCEL")
      ENCRYPT_DISK=0
      clear
      choose_disk_root_size
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
  esac
}

confirm_disk_passphrase() {
  # on descriptor 3
  exec 3>&1
  result=$(dialog --backtitle "Disk Partition -- $DIALOG_HELP_TITLE" \
    --no-collapse \
    --cancel-label "Cancel" \
    --ok-label "Ok" \
    --clear \
    --colors \
    --insecure \
    --passwordbox "Confirm disk passphrase:" $DIALOG_HEIGHT $DIALOG_WIDTH \
    2>&1 1>&3)
  exit_status=$?
  # Close file descriptor 3
  exec 3>&-
  # Act on exit status
  case $exit_status in
    "$DIALOG_OK")
      clear
      if [ "$DISK_LUKS_KEY" != "$result" ]; then
        display_error "Passphrase and confirmation are different!"
        choose_disk_encryption
      else
        choose_disk_root_size
      fi
      ;;
    "$DIALOG_CANCEL")
      clear
      choose_disk_encryption
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
  esac
}

choose_disk_root_size() {
  DISK_SIZE=$(lsblk -dn -b -o SIZE "$SELECTED_DISK")
  DISK_SIZE_GO=$((DISK_SIZE / 1000000000))
  if [ "$DISK_SIZE_GO" -lt $DISK_MIN_SIZE ]; then
    display_error "Disk size is too small.\n A minimum of $DISK_MIN_SIZE Go is recommended."
    clear
    exit 1
  fi
  if [ "$DISK_SIZE_GO" -lt 100 ]; then
    SELECTED_ROOT_SIZE=$DISK_ROOT_MIN_SIZE
  fi
  DISK_ROOT_MAX_SIZE=$(awk -vp=$DISK_SIZE_GO 'BEGIN{print int(p * 0.85)}')
  # on descriptor 3
  exec 3>&1
  result=$(dialog --backtitle "Disk Partition -- $DIALOG_HELP_TITLE" \
    --title "Installation on disk" \
    --no-collapse \
    --cancel-label "Previous" \
    --ok-label "Next" \
    --clear \
    --colors \
    --rangebox "Choose the /root partition size.\n25Go at minimum - 80Go recommended.\n" $DIALOG_HEIGHT $DIALOG_WIDTH "$DISK_ROOT_MIN_SIZE" "$DISK_ROOT_MAX_SIZE" "$SELECTED_ROOT_SIZE" \
    2>&1 1>&3)
  exit_status=$?
  # Close file descriptor 3
  exec 3>&-
  case $exit_status in
    "$DIALOG_OK")
      clear
      SELECTED_ROOT_SIZE="$result"
      hardware_detection_gpu
      ;;
    "$DIALOG_CANCEL")
      clear
      choose_disk
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
  esac
}

hardware_detection_gpu() {
  NB_GPU=$(lspci | grep -ci "vga")
  if [ $VERBOSE -eq 1 ]; then
    echo -e "${GREY}${NB_GPU}${NC} GPU found."
  fi
  if [ "$NB_GPU" -ge 1 ]; then
    GPU=$(lspci -nn | grep -i "vga")
    if echo "$GPU" | grep -qi "amd"; then
      GPU_VENDOR_DETECTED="AMD"
    elif echo "$GPU" | grep -qi "nvidia"; then
      GPU_VENDOR_DETECTED="Nvidia"
    fi
    if [[ -n $GPU_VENDOR_DETECTED ]]; then
      # on descriptor 3
      exec 3>&1
      result=$(dialog --backtitle "Hardware detection -- $DIALOG_HELP_TITLE" \
        --title "GPU detected" \
        --no-collapse \
        --clear \
        --colors \
        --yesno "GPU detected: $GPU_VENDOR_DETECTED \nWould you like to install the hardware pilot (recommended) ?\nIt may imply the installation of unfree packages." $DIALOG_HEIGHT $DIALOG_WIDTH \
        2>&1 1>&3)
      exit_status=$?
      # Close file descriptor 3
      exec 3>&-
      case $exit_status in
        "$DIALOG_OK")
          GPU_INSTALL=1
          clear
          ;;
        "$DIALOG_CANCEL")
          GPU_INSTALL=0
          clear
          ;;
        "$DIALOG_ESC")
          clear
          echo "Program aborted." >&2
          exit 1
          ;;
      esac
    fi
  fi
  confirm_install
}

confirm_install() {
  # on descriptor 3
  exec 3>&1
  result=$(dialog --backtitle "Final step" \
    --title "Final step: Installation" \
    --no-collapse \
    --clear \
    --colors \
    --yesno "Proceed with installation ?\nYour hard drive disk will be formatted and all data erased." $DIALOG_HEIGHT $DIALOG_WIDTH \
    2>&1 1>&3)
  exit_status=$?
  # Close file descriptor 3
  exec 3>&-
  case $exit_status in
    "$DIALOG_OK")
      CONFIRM_INSTALL=1
      clear
      ;;
    "$DIALOG_CANCEL")
      clear
      echo "Program terminated without install." >&2
      #exit 1
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
  esac
}

choose_lang

if [ $VERBOSE -eq 1 ]; then
  echo -e "${YELLOW}Current options:${NC}"
  echo "bin path: $CURIOS_INSTALL_PATH"
  echo "locale: $SELECTED_LOCALE"
  echo "keyboard: $SELECTED_LOCALE_CONSOLE"
  echo "time zone: $SELECTED_TZ"
  echo "hostname: $PC_HOSTNAME"
  echo "username: $USERNAME"
  echo "user full name: $FULLNAME"
  echo "install on disk: $SELECTED_DISK"
  echo "encrypt disk: $ENCRYPT_DISK"
  echo "/root size: $SELECTED_ROOT_SIZE$DISK_SIZE_UNIT"
  echo "GPU hardware vendor: $GPU_VENDOR_DETECTED"
  echo "install GPU driver: $GPU_INSTALL"
  echo -e "${YELLOW}End of options.${NC}"
fi

#------------- Format disk function
format_disk () {
  set -eu
  echo -e "${GREEN}================================${NC}"
  echo -e "${GREEN}================================${NC}"
  echo -e "${BLUE}Formatting disk:${NC} ${SELECTED_DISK}"
  if [ $ENCRYPT_DISK -eq 1 ]; then
    echo -e "${YELLOW}Disk will be fully encrypted...${NC}"
  fi

  # Check if disk exist
  if fdisk -l "$SELECTED_DISK"; then
    SELECTED_DISK1="$SELECTED_DISK"1
    SELECTED_DISK2="$SELECTED_DISK"2
    if [[ $SELECTED_DISK =~ ^"/dev/nvme" ]]; then
      SELECTED_DISK1="$SELECTED_DISK"p1
      SELECTED_DISK2="$SELECTED_DISK"p2
    fi
  else
    echo -e "${RED}Disk ${SELECTED_DISK} not found!${NC}"
    exit 2
  fi
  swapoff -av
  #umount "$SELECTED_DISK"*
  wipefs -af "$SELECTED_DISK"

  echo -e "${GREEN}================================${NC}"
  echo -e "${GREEN}================================${NC}"
  echo -e "${BLUE}UEFI partitioning...${NC}"
  parted --script "$SELECTED_DISK" mklabel gpt
  parted --script "$SELECTED_DISK" mkpart ESP fat32 1MB 1024MB
  parted --script "$SELECTED_DISK" set 1 esp on
  parted --script "$SELECTED_DISK" mkpart system 1024MB 100%

  echo -e "${GREEN}================================${NC}"
  echo -e "${GREEN}================================${NC}"
  echo -e "${BLUE}Filesystem formatting...${NC}"
  mkfs.fat -F 32 -n boot "$SELECTED_DISK1"

  LVM_MAPPED_DEVICE=$SELECTED_DISK2
  if [ $ENCRYPT_DISK -eq 1 ]; then
    echo -e "${GREEN}================================${NC}"
    echo -e "${GREEN}================================${NC}"
    echo -e "${BLUE}Creating encrypted partition...${NC}"
    DEVICE_NAME="cryptroot" # /dev/mapper/ name
    LVM_MAPPED_DEVICE="/dev/mapper/$DEVICE_NAME"
    cryptsetup -q --label="curiosystem" --type=luks2 luksFormat "$SELECTED_DISK2" <<< "${DISK_LUKS_KEY}"
    # open the encrypted partition and map it to /dev/mapper/$DEVICE_NAME
    echo -n "$DISK_LUKS_KEY" | cryptsetup luksOpen "$SELECTED_DISK2" $DEVICE_NAME -
  fi

  echo -e "${GREEN}================================${NC}"
  echo -e "${GREEN}================================${NC}"
  echo -e "${BLUE}Creating LVM volumes...${NC}"
  pvcreate "$LVM_MAPPED_DEVICE"
  # create a volume group inside
  vgcreate curioslvm "$LVM_MAPPED_DEVICE"
  # create the swap volume
  lvcreate --size 8G curioslvm --name swap
  # create the root volume
  lvcreate --size "$SELECTED_ROOT_SIZE$DISK_SIZE_UNIT" curioslvm --name root
  # create a home volume (100% of free disk)
  lvcreate -l 100%FREE curioslvm --name home
  if [ $VERBOSE -eq 1 ]; then
    #pvdisplay "$LVM_MAPPED_DEVICE"
    #vgdisplay "$LVM_MAPPED_DEVICE"
    lvdisplay
    if [ $ENCRYPT_DISK -eq 1 ]; then
      cryptsetup status "$LVM_MAPPED_DEVICE"
    fi
  fi

  # Filesystem formatting
  mkfs.ext4 -L nixos /dev/mapper/curioslvm-root
  mkfs.ext4 -L home /dev/mapper/curioslvm-home
  mkswap -L swap /dev/mapper/curioslvm-swap

  # DEBUG
  # Unmount and remove volumes:
  #umount /dev/mapper/curioslvm-home && umount /dev/mapper/curioslvm-root
  #lvremove /dev/curioslvm/home && lvremove /dev/curioslvm/root && lvremove /dev/curioslvm/swap
  #vgchange -an curioslvm
  #vgremove curioslvm
  #pvremove "$LVM_MAPPED_DEVICE"
}

#------------- CuriOS dotfiles install, see: https://github.com/VideoCurio/nixos-dotfiles
dotfiles_install () {
  echo -e "${GREEN}================================${NC}"
  echo -e "${GREEN}================================${NC}"
  echo -e "${BLUE}Custom dotfiles installation...${NC}"
  local SKEL_DIR="/mnt/etc/skel/"
  local HOME_DIR="/mnt/home/*/"
  mkdir -p "$SKEL_DIR"
  curios-dotfiles --lang "$SELECTED_LOCALE_CONSOLE" "$SKEL_DIR"
  for DIR in $HOME_DIR; do
    if [[ -d "$DIR" && "$DIR" != */lost+found/ ]]; then
      curios-dotfiles --lang "$SELECTED_LOCALE_CONSOLE" "$DIR"
      chown -R 1000:100 "$DIR" # Any way to predict OWNER at this stage ?
    fi
  done
}

if [ $CONFIRM_INSTALL -eq 1 ]; then
  if [ $VERBOSE -eq 1 ]; then
    lsblk -A -pdn -o NAME
  fi
  format_disk
  echo -e "${GREEN}================================${NC}"
  echo -e "${GREEN}================================${NC}"
  echo -e "${BLUE}Mounting system...${NC}"
  sleep 2s
  if ! mountpoint -q /mnt; then
    mount /dev/disk/by-label/nixos /mnt
  fi
  mkdir -p /mnt/boot
  if ! mountpoint -q /mnt/boot; then
    mount -o umask=077 /dev/disk/by-partlabel/ESP /mnt/boot
  fi
  if [[ $(swapon -s | wc -l) -eq 1 ]]; then
    swapon /dev/disk/by-label/swap
  fi
  mkdir -p /mnt/home
  if ! mountpoint -q /mnt/home; then
    mount /dev/disk/by-label/home /mnt/home
  fi

  if [ $VERBOSE -eq 1 ]; then
    lsblk -A -lo NAME,SIZE,TYPE,MOUNTPOINTS,PARTLABEL,UUID
  fi

  echo -e "${GREEN}================================${NC}"
  echo -e "${GREEN}================================${NC}"
  echo -e "${BLUE}Create basic configuration...${NC}"
  nixos-generate-config --root /mnt --no-filesystems

  echo -e "${GREEN}================================${NC}"
  echo -e "${GREEN}================================${NC}"
  echo -e "${BLUE}Preparing configurations files...${NC}"
  install -D -m 644 -t "$NIXOS_CONFIG_DIR"/ "$CURIOS_SRC_PATH"/*.nix
  install -D -m 644 -t "$NIXOS_CONFIG_DIR"/modules/ "$CURIOS_SRC_PATH"/modules/*.nix
  install -D -m 644 -t "$NIXOS_CONFIG_DIR"/modules/desktop-apps/ "$CURIOS_SRC_PATH"/modules/desktop-apps/*.nix
  install -D -m 644 -t "$NIXOS_CONFIG_DIR"/modules/filesystems/ "$CURIOS_SRC_PATH"/modules/filesystems/*.nix
  install -D -m 644 -t "$NIXOS_CONFIG_DIR"/modules/hardened/ "$CURIOS_SRC_PATH"/modules/hardened/*.nix
  install -D -m 644 -t "$NIXOS_CONFIG_DIR"/modules/hardware/ "$CURIOS_SRC_PATH"/modules/hardware/*.nix
  install -D -m 644 -t "$NIXOS_CONFIG_DIR"/modules/platforms/ "$CURIOS_SRC_PATH"/modules/platforms/*.nix
  install -D -m 644 -t "$NIXOS_CONFIG_DIR"/pkgs/curios-dotfiles/ "$CURIOS_SRC_PATH"/pkgs/curios-dotfiles/default.nix
  install -D -m 644 -t "$NIXOS_CONFIG_DIR"/pkgs/curios-update/ "$CURIOS_SRC_PATH"/pkgs/curios-update/default.nix
  install -D -m 555 -t "$NIXOS_CONFIG_DIR"/pkgs/curios-update/bin/ "$CURIOS_SRC_PATH"/pkgs/curios-update/bin/curios-update

  # Update user language:
  sed "s/i18n\.locale = \".*/i18n.locale = \"${SELECTED_LOCALE}\";/g" -i "$NIXOS_CONFIG_DIR"/settings.nix
  # Update console keyboard map:
  sed "s/keyboard = \".*/keyboard = \"${SELECTED_LOCALE_CONSOLE}\";/g" -i "$NIXOS_CONFIG_DIR"/settings.nix
  # Update time zone
  sed "s/timeZone = \".*/timeZone = \"${SELECTED_TZ//\//\\\/}\";/g" -i "$NIXOS_CONFIG_DIR"/settings.nix
  # Update user name
  sed "s/users\.users\..*/users.users.${USERNAME} = {/g" -i "$NIXOS_CONFIG_DIR"/user-me.nix
  sed "s/users\.users\..*/users.users.${USERNAME} = {/g" -i "$NIXOS_CONFIG_DIR"/settings.nix
  sed "s/description = \".*/description = \"${FULLNAME}\";/g" -i "$NIXOS_CONFIG_DIR"/settings.nix
  # Update hostname
  sed "s/hostname = \".*/hostname = \"${PC_HOSTNAME}\";/g" -i "$NIXOS_CONFIG_DIR"/settings.nix
  # platform settings:
  sed 's/platform\.rpi4\.enable = .*/platform.rpi4.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  sed 's/platform\.amd64\.enable = .*/platform.amd64.enable = lib.mkDefault true;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  sed 's/bootefi\.enable = .*/bootefi.enable = lib.mkDefault true;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  # filesystems settings:
  if [ $ENCRYPT_DISK -eq 1 ]; then
    # Update settings.nix
    sed 's/filesystems\.luks\.enable = .*/filesystems.luks.enable = lib.mkDefault true;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
    sed 's/filesystems\.minimal\.enable = .*/filesystems.minimal.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  else
    # Also update settings.nix
    sed 's/filesystems\.luks\.enable = .*/filesystems.luks.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
    sed 's/filesystems\.minimal\.enable = .*/filesystems.minimal.enable = lib.mkDefault true;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  fi
  # GPU settings:
  if [[ "$GPU_INSTALL" -eq 1 && "$GPU_VENDOR_DETECTED" == "AMD" ]]; then
    echo "Enabling AMD GPU..."
    sed 's/amdGpu\.enable = .*/amdGpu.enable = lib.mkDefault true;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  elif [[ "$GPU_INSTALL" -eq 1 && "$GPU_VENDOR_DETECTED" == "Nvidia" ]]; then
    echo "Enabling Nvidia GPU..."
    sed 's/nvidiaGpu\.enable = .*/nvidiaGpu.enable = lib.mkDefault true;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
    # Switch to LTS kernel by default for Nvidia GPU
    sed 's/bootefi\.kernel\.latest = .*/bootefi.kernel.latest = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  else
    echo "Disabling GPU..."
    sed 's/amdGpu\.enable = .*/amdGpu.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
    sed 's/nvidiaGpu\.enable = .*/nvidiaGpu.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  fi

  echo -e "${GREEN}================================${NC}"
  echo -e "${GREEN}================================${NC}"
  echo -e "${BLUE}Launching NixOS installer...${NC}";
  nixos-install --cores 0 --no-root-passwd
  if [ $DO_DOTFILES_INSTALL -eq 1 ]; then
    dotfiles_install
  fi

  echo -e "${GREEN}Done...${NC}"
  # on descriptor 3
  exec 3>&1
  result=$(dialog --backtitle "Success" \
    --ok-label "Reboot" \
    --no-collapse \
    --clear \
    --colors \
    --msgbox "\Zb\Z2CuriOS was successfully installed! \Zn\nRemember to remove USB installer!" $DIALOG_HEIGHT $DIALOG_WIDTH \
    2>&1 1>&3)
  exit_status=$?
  # Close file descriptor 3
  exec 3>&-
  # Act on exit status
  case $exit_status in
    "$DIALOG_OK")
      clear
      reboot now
      ;;
    "$DIALOG_ESC")
      echo "Program aborted." >&2
      exit 1
      ;;
  esac
fi
