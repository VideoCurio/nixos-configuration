#!/usr/bin/env bash

# CuriOS install script as NixOS package.
# Meant to be run during an NixOS ISO installation.
# !IMPORTANT! Run this script as sudo
# It will create 3 partitions for '/boot', '/' and a 8Go swap
# OR with --crypt option, it will create a 512Mo boot and a LUKS partition.
# The encrypted LUKS partition will contain LVM partitions for '/' (100Go), '/home' and a 8Go swap.
#
# Usage:
#       curios-install [options] <disk_partition>
#
# Examples:
# curios-install /dev/nvme0n1               - Standard install on the first NVMe SSD.
# curios-install --crypt /dev/nvme0n1       - Full encrypted disk install on the first NVMe SSD.
# curios-install /dev/vda                   - Standard install on a QEMU disk.

set -eu

#------------- Colors -------------#
readonly RED="\033[31;1m"          # Red and bold
readonly GREEN="\033[32;1m"        # Green and bold
readonly BLUE="\033[34;1m"         # Blue and bold
readonly GREY="\033[37;1m"         # Grey and bold
readonly YELLOW="\033[33;1;3m"     # Yellow, bold and italic
#readonly YELLOWBLK="\033[33;1;5m"  # Yellow, bold and slow blink
#readonly UNDL="\033[4m"            # Underlined
#readonly BOLD="\033[1m"            # Bold
readonly NC="\033[0m"              # No Color

#------------- Print help function
usage ()
{
  echo -e "Usage: ${GREY}curios-install [options] <disk_partition>${NC}
Where,
  ${GREY}disk_partition${NC}: Valid /dev path of a disk to install NixOS on.
  The default root partition size is set to 80G for full disk encryption option, use --root-size to change this.

Options:
  ${GREY}-h, --help${NC}         Print this message.
  ${GREY}--crypt${NC}            Full disk encryption with LVM+LUKS with separated root and /home partitions.
  ${GREY}--root-size SIZE${NC}   Set root partition size (e.g., 100G or 20%) - ONLY with --crypt option.
  ${GREY}--rpi4${NC}             Raspberry PI 4 installation (exclude --crypt option).
  ${GREY}-v, --verbose${NC}      Print more information.
  ${GREY}--version${NC}          Print version number and exit.
  ${GREY}-y, --yes${NC}          Batch/script mode. Do not prompt for confirmation interactively but always assume the answer is yes.

Examples:
  Full encrypted disk install on the first NVMe SSD (with /home partition and 120Go root partition):
    ${GREY}curios-install -y --crypt --root-size 120G /dev/nvme0n1${NC}
  Minimal disk install on the second HDD:
    ${GREY}curios-install /dev/sdb${NC}
  Minimal disk install on a QEMU/KVM virtual disk:
    ${GREY}curios-install /dev/vda${NC}
  Raspberry Pi 4 install:
    ${GREY}nix-shell -p git raspberrypi-eeprom
    curios-install --rpi4 /dev/mmcblk1${NC}"
  exit 0
}

#------------- Variables init
readonly VERSION="0.3";
DO_DOTFILES_INSTALL=1;
ASSUME_YES=0;
ENCRYPT_DISK=0;
ROOT_SIZE="80G";
RPI4_INSTALL=0;
VERBOSE=0;
SELECTED_LOCALE="";
SELECTED_LOCALE_CONSOLE="";
SELECTED_TZ="";
GPU_DETECTED="";
INSTALL_GPU=0;
SCRIPT_PATH="$(dirname "$0")"
CURIOS_INSTALL_PATH=".";
CURIOS_SRC_PATH=".";
NIXOS_CONFIG_DIR="/mnt/etc/nixos"

#------------- Function to validate root size format
validate_root_size() {
  local PATTERN="^[0-9]+([GMm]|%)$"
  if [ $VERBOSE -eq 1 ]; then
    echo "root size: $1"
  fi
  if ! [[ "$1" =~ $PATTERN ]]; then
    echo -e "${RED}Invalid root size format${NC}. Use 'SIZE[G|M|m]' or 'SIZE%' (e.g., 100G, 15% or 80m)."
    exit 1
  fi
}

#------------- Scripts arguments parse options
ARGS=$(getopt --longoptions="verbose,version,help,crypt,rpi4,root-size,yes:" --name "$0" --options ":hvy" -- "$@")
if [ $# -lt 1 ]; then
  usage
fi;

DISK_PART="${!#}"

eval set -- "$ARGS"

while true; do
  case "$1" in
    -v | --verbose)
      VERBOSE=1
      shift
      ;;
    -h | --help)
      usage
      ;;
    --crypt)
      ENCRYPT_DISK=1
      shift
      ;;
    --rpi4)
      RPI4_INSTALL=1
      shift
      ;;
    --root-size)
      ROOT_SIZE="$3"
      validate_root_size "$ROOT_SIZE"
      shift 2
      ;;
    --version)
      echo "$VERSION"
      exit 0
      ;;
    -y | --yes)
      ASSUME_YES=1
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

if [ $RPI4_INSTALL -eq 1 ]; then
  # disk on RPI4 could not be modified
  ENCRYPT_DISK=0
fi

# Check disk path
if [ ! -e "$DISK_PART" ]; then
  echo -e "${RED}Disk path is invalid!${NC}"
  exit 2
fi

if [ $VERBOSE -eq 1 ]; then
  echo -e "Script current path: ${SCRIPT_PATH}"
fi

#------------- Check curios-sources files
if [ $RPI4_INSTALL -eq 1 ]; then
  CURIOS_SRC_PATH=$(realpath "./")
else
  CURIOS_INSTALL_PATH=$(dirname "$(realpath "$(which curios-install)")")
  CURIOS_SRC_PATH=$(realpath "$CURIOS_INSTALL_PATH"/../share/curios)
fi
#CURIOS_SRC_PATH=$(nix-store --query --outputs "$(which curios-install)")
#CURIOS_SRC_PATH=$(realpath "$CURIOS_SRC_PATH"/share/curios)
#CURIOS_SRC_PATH=$(realpath "$SCRIPT_PATH"/../share/curios)
if [ $VERBOSE -eq 1 ]; then
  echo -e "Package store path: ${CURIOS_SRC_PATH}"
fi
if [ ! -f "$CURIOS_SRC_PATH"/configuration.nix ]; then
  echo -e "${RED}configuration.nix file not found!${NC}"
  exit 1
fi

if [ ! -f "$CURIOS_SRC_PATH"/settings.nix ]; then
  echo -e "${RED}settings.nix file not found!${NC}"
  exit 1
fi

if [ ! -f "$CURIOS_SRC_PATH"/user-me.nix ]; then
  echo -e "${RED}user-me.nix file not found!${NC}"
  exit 1
fi

if [ ! -d "$CURIOS_SRC_PATH"/modules/ ]; then
  echo -e "${RED}modules directory not found!${NC}"
  exit 1
fi

if [ ! -d "$CURIOS_SRC_PATH"/pkgs/ ]; then
  echo -e "${RED}pkgs directory not found!${NC}"
  exit 1
fi

#------------- Check dependencies
available() { command -v "$1" >/dev/null; }

if ! available git; then
  echo -e "${RED}git command not found!${NC}"
  exit 2
fi
if ! available parted; then
  echo -e "${RED}parted command not found!${NC}"
  exit 2
fi
if ! available cryptsetup; then
  echo -e "${RED}cryptsetup command not found!${NC}"
  exit 2
fi
if ! available mkfs; then
  eho -e "${RED}mkfs command not found!${NC}"
  exit 2
fi

########### Choose your language:
LOCALES_UTF8=(
  "en_US.UTF-8"
  "en_GB.UTF-8"
  "fr_FR.UTF-8"
  "es_ES.UTF-8"
  "de_DE.UTF-8"
  "zh_CN.UTF-8"
  "ja_JP.UTF-8"
  "pt_PT.UTF-8"
  "ru_RU.UTF-8"
  "it_IT.UTF-8"
  "ko_KR.UTF-8"
  "ar_SA.UTF-8"
  "nl_NL.UTF-8"
  "pl_PL.UTF-8"
  "sv_SE.UTF-8"
  "tr_TR.UTF-8"
  "cs_CZ.UTF-8"
  "da_DK.UTF-8"
  "hu_HU.UTF-8"
  "no_NO.UTF-8"
  "he_IL.UTF-8"
  "uk_UA.UTF-8"
)
LOCALES_CONSOLE=(
  "us"
  "gb"
  "fr"
  "es"
  "de"
  "zh"
  "ja"
  "pt"
  "ru"
  "it"
  "ko"
  "ar"
  "nl"
  "pl"
  "sv"
  "tr"
  "cs"
  "da"
  "hu"
  "no"
  "he"
  "uk"
)
LOCALES_TZ=(
  "America/New_York"
  "Europe/London"
  "Europe/Paris"
  "Europe/Madrid"
  "Europe/Berlin"
  "Asia/Shanghai"
  "Asia/Tokyo"
  "Europe/Lisbon"
  "Europe/Moscow"
  "Europe/Rome"
  "Asia/Seoul"
  "Asia/Riyadh"
  "Europe/Amsterdam"
  "Europe/Warsaw"
  "Europe/Stockholm"
  "Europe/Istanbul"
  "Europe/Prague"
  "Europe/Berlin"
  "Europe/Budapest"
  "Europe/Oslo"
  "Asia/Jerusalem"
  "Europe/Kyiv"
)

# Print locales
echo "Choose your language in the list below:"
for i in "${!LOCALES_UTF8[@]}"; do
  echo "$((i+1))) ${LOCALES_UTF8[i]}"
done

read -r -p "Enter your choice (1-22): " LANG_CHOICE
if [ "$LANG_CHOICE" -ge 1 ] && [ "$LANG_CHOICE" -le ${#LOCALES_UTF8[@]} ]; then
  SELECTED_LOCALE="${LOCALES_UTF8[$((LANG_CHOICE-1))]}"
  SELECTED_LOCALE_CONSOLE="${LOCALES_CONSOLE[$((LANG_CHOICE-1))]}"
  SELECTED_TZ="${LOCALES_TZ[$((LANG_CHOICE-1))]}"
  # TODO: 'loadkeys XX' to the currently selected layout ?
else
  echo -e "${RED}Invalid choice${NC}. Choose a number between 1 and ${#LOCALES_UTF8[@]}."
  exit 1
fi

########### TODO: keyboard layout

########### Choose a timezone:
read -r -p "Enter your time zone (${SELECTED_TZ}): " PC_TIMEZONE
# hostname check
if [ -z "$PC_TIMEZONE" ]; then
 PC_TIMEZONE="${SELECTED_TZ}"
fi
if ! [[ $PC_TIMEZONE =~ ^[a-zA-Z0-9/_+\-]+$ ]]; then
  echo -e "${RED}Invalid time zone${NC}, it could only contain alphanumerical, '/', '-', '+' or '_' characters like 'America/New_York' or 'Etc/GMT+2'."
  exit 1
fi

########### Choose a username:
if [ $RPI4_INSTALL -eq 1 ]; then
  # Username must be 'nixos' on preconfigured sd-card for aarch64 platform
  USERNAME="nixos"
  echo -e "Username is set to ${GREEN}${USERNAME}${NC} on NixOS SD card for aarch64 platform."
else
  read -r -p "Enter your username: " USERNAME
  # username check
  if [ -z "$USERNAME" ]; then
    echo -e "${RED}username cannot be empty.${NC}"
    exit 1
  fi
  if ! [[ $USERNAME =~ ^[[:alnum:]]+$ ]]; then
    echo -e "${RED}Invalid username${NC}, it could only contain alphanumerical characters."
    exit 1
  fi
fi

########### Choose a full name:
read -r -p "Enter your full name: " FULLNAME
# fullname check
if [ -z "$FULLNAME" ]; then
  FULLNAME="Dwight K. Schrute"
  echo -e "You are now known as ${GREEN}${FULLNAME}${NC}"
fi
if ! [[ $FULLNAME =~ ^[[:alnum:][:space:].]+$ ]]; then
  echo -e "${RED}Invalid full name${NC}, it could only contain alphanumerical, '.' or space characters."
  exit 1
fi

########### Choose a hostname:
read -r -p "Choose your machine hostname (CuriOS): " PC_HOSTNAME
# hostname check
if [ -z "$PC_HOSTNAME" ]; then
 PC_HOSTNAME="CuriOS"
fi
if ! [[ $PC_HOSTNAME =~ ^[[:alnum:].]+$ ]]; then
  echo -e "${RED}Invalid hostname${NC}, it could only contain alphanumerical or '.' characters."
  exit 1
fi

########### GPU:
if [ $RPI4_INSTALL -eq 0 ]; then
  NB_GPU=$(lspci | grep -ci "vga")
  if [ $VERBOSE -eq 1 ]; then
    echo -e "${GREY}${NB_GPU}${NC} GPU found."
  fi

  if [ "$NB_GPU" -ge 1 ]; then
    GPU=$(lspci -nn | grep -i "vga")
    if echo "$GPU" | grep -qi "amd"; then
      GPU_DETECTED="amd"
      while true; do
        if [ $ASSUME_YES -eq 0 ]; then
          read -r -p "AMD GPU detected, would like to install it ? (y/n): " YN
        else
          YN="y"
        fi
        case $YN in
          [yY] ) INSTALL_GPU=1;
            break;;
          [nN] ) echo "Proceeding without installing GPU pilot...";
            break;;
          * ) echo -e "${RED}Invalid response.${NC}";;
        esac
      done
    fi
    if echo "$GPU" | grep -qi "nvidia"; then
      GPU_DETECTED="nvidia"
      while true; do
        if [ $ASSUME_YES -eq 0 ]; then
          read -r -p "Nvidia GPU detected, would like to install it ? (y/n): " YN
         else
          YN="y"
        fi
        case $YN in
          [yY] ) INSTALL_GPU=1;
            break;;
          [nN] ) echo "Proceeding without installing GPU pilot...";
            break;;
          * ) echo -e "${RED}Invalid response.${NC}";;
        esac
      done
    fi
  fi
fi

# Test - debug parameters
if [ $VERBOSE -eq 1 ]; then
  echo -e "${YELLOW}Current options:${NC}"
  echo "bin path: $CURIOS_INSTALL_PATH"
  echo "--crypt: $ENCRYPT_DISK"
  echo "--rpi4: $RPI4_INSTALL"
  echo "--root-size: $ROOT_SIZE"
  echo "<disk_partition>: $DISK_PART"
  echo "locale: $SELECTED_LOCALE"
  echo "username: $USERNAME"
  echo "full name: $FULLNAME"
  echo "hostname: $PC_HOSTNAME"
  echo "timezone: $PC_TIMEZONE"
  echo "GPU: $GPU_DETECTED"
  echo "GPU install: $INSTALL_GPU"
  echo -e "${YELLOW}End of options.${NC}"
fi

# This script must be run as root
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}This script MUST be run as root:${NC} sudo curios-install" >&2
  exit 1
fi

#------------- curios dotfiles install, see: https://github.com/VideoCurio/nixos-dotfiles
dotfiles-inst () {
  echo -e "${GREEN}================================${NC}"
  echo -e "${GREEN}================================${NC}"
  echo -e "${BLUE}Custom dotfiles installation...${NC}"
  local SKEL_DIR="/mnt/etc/skel/"
  local HOME_DIR="/mnt/home/*/"
  if [ $RPI4_INSTALL -eq 1 ]; then
    SKEL_DIR="/etc/skel/"
    HOME_DIR="/home/*/"
  fi
  mkdir -p "$SKEL_DIR"
  curios-dotfiles --lang "$SELECTED_LOCALE_CONSOLE" "$SKEL_DIR"
  for DIR in $HOME_DIR; do
    if [[ -d "$DIR" && "$DIR" != */lost+found/ ]]; then
      curios-dotfiles --lang "$SELECTED_LOCALE_CONSOLE" "$DIR"
      chown -R 1000:100 "$DIR" # Any way to predict OWNER at this stage ?
    fi
  done
}

#------------- Format disk function
format () {
  echo -e "${GREEN}Formatting disk:${NC} ${DISK_PART}"
  if [ $ENCRYPT_DISK -eq 1 ]; then
    echo -e "${BLUE}Disk will be fully encrypted...${NC}"
  fi

  # Check if disk exist
  if fdisk -l "$DISK_PART"; then
    DISK_PART1="$DISK_PART"1
    DISK_PART2="$DISK_PART"2
    DISK_PART3="$DISK_PART"3
    if [[ $DISK_PART =~ ^"/dev/nvme" ]]; then
      DISK_PART1="$DISK_PART"p1
      DISK_PART2="$DISK_PART"p2
      DISK_PART3="$DISK_PART"p3
    fi
  else
    echo -e "${RED}Disk ${DISK_PART} not found!${NC}"
    exit 2
  fi

  if [ $VERBOSE -eq 1 ]; then
    lsblk -lo NAME,SIZE,TYPE,MOUNTPOINTS,UUID
  fi

  echo -e "${GREEN}================================${NC}"
  echo -e "${GREEN}================================${NC}"
  echo -e "${BLUE}UEFI partitioning...${NC}"

  PARTED_OPT=""
  if [ $ASSUME_YES -eq 1 ]; then
    PARTED_OPT="--script"
  fi
  parted "$PARTED_OPT" "$DISK_PART" -- mklabel gpt
  parted "$PARTED_OPT" "$DISK_PART" -- mkpart ESP fat32 1MB 512MB
  parted "$PARTED_OPT" "$DISK_PART" -- set 1 esp on
  if [ $ENCRYPT_DISK -eq 0 ]; then
    parted "$PARTED_OPT" "$DISK_PART" -- mkpart root ext4 512MB -8GB
    parted "$PARTED_OPT" "$DISK_PART" -- mkpart swap linux-swap -8GB 100%
  else
    parted "$PARTED_OPT" "$DISK_PART" -- mkpart system 512MB 100%
  fi

  echo -e "${GREEN}================================${NC}"
  echo -e "${GREEN}================================${NC}"
  echo -e "${BLUE}Filesystem formatting...${NC}"
  mkfs.fat -F 32 -n boot "$DISK_PART1"
  if [ $ENCRYPT_DISK -eq 0 ]; then
    mkfs.ext4 -L nixos "$DISK_PART2"
    mkswap -L swap "$DISK_PART3"
  fi

  if [ $ENCRYPT_DISK -eq 1 ]; then
    echo -e "${GREEN}================================${NC}"
    echo -e "${GREEN}================================${NC}"
    echo -e "${BLUE}Creating encrypted partition...${NC}"
    cryptsetup luksFormat -q -y --label nixossystem  "$DISK_PART2"
    # open the encrypted partition and map it to /dev/mapper/cryptroot
    cryptsetup luksOpen "$DISK_PART2" cryptroot

    echo -e "${GREEN}================================${NC}"
    echo -e "${GREEN}================================${NC}"
    echo -e "${BLUE}Creating LVM volumes...${NC}"
    pvcreate /dev/mapper/cryptroot
    if [ $VERBOSE -eq 1 ]; then
      pvdisplay
    fi
    # create a volume group inside
    vgcreate lvmroot /dev/mapper/cryptroot
    if [ $VERBOSE -eq 1 ]; then
      vgdisplay
    fi
    # create the swap volume
    lvcreate --size 8G lvmroot --name swap
    # create the root volume
    lvcreate --size "$ROOT_SIZE" lvmroot --name root
    # create a home volume (100% of free disk)
    lvcreate -l 100%FREE lvmroot --name home
    if [ $VERBOSE -eq 1 ]; then
      lvdisplay
    fi

    # Filesystem formatting
    mkfs.ext4 -L nixos /dev/mapper/lvmroot-root
    mkfs.ext4 -L home /dev/mapper/lvmroot-home
    mkswap -L swap /dev/mapper/lvmroot-swap
  fi
}

# Raspberry Pi 4 install
# Prepare an SD card
# Download an SD card image from https://hydra.nixos.org/job/nixos/trunk-combined/nixos.sd_image.aarch64-linux
# Unzip it with:
# nix-shell -p zstd --run "unzstd nixos-image-sd-card-*-aarch64-linux.img.zst"
# Burn it with Balena Etcher, Caligula or dd
# sudo dd if=nixos-image-sd-card-25.05.805977.88983d4b665f-aarch64-linux.img of=/dev/sdb bs=10MB oflag=dsync status=progress
# boot from the SD card, then as root:
# nix-shell -p git raspberrypi-eeprom
# cd /tmp
# git clone https://github.com/VideoCurio/nixos-configuration
# cd nixos-configuration/
# git checkout testing
# curios-install --rpi4 /dev/mmcblk1

if [ $RPI4_INSTALL -eq 0 ]; then
  while true; do
    if [ $ASSUME_YES -eq 0 ]; then
      read -r -p "Partitioning disk $DISK_PART ? All data will be ERASED (y/n): " YN
    else
      YN="y"
    fi
    case $YN in
      [yY] ) format;
        break;;
      [nN] ) echo "Proceeding without disk formatting...";
        break;;
      * ) echo -e "${RED}Invalid response.${NC}";;
    esac
  done
fi

if [ $VERBOSE -eq 1 ]; then
  lsblk --fs
fi

echo -e "${GREEN}================================${NC}"
echo -e "${GREEN}================================${NC}"
echo -e "${BLUE}Mounting system...${NC}"
sleep 2s
if [ $RPI4_INSTALL -eq 1 ]; then
  echo -e "${BLUE}Raspberry Pi 4 updating firmware...${NC}"
  # Updating firmware
  mount /dev/disk/by-label/FIRMWARE /mnt
  BOOTFS=/mnt rpi-eeprom-update -d -a
else
  if ! mountpoint -q /mnt; then
    mount /dev/disk/by-label/nixos /mnt
  fi
  mkdir -p /mnt/boot
  if ! mountpoint -q /mnt/boot; then
    mount -o umask=077 /dev/disk/by-partlabel/ESP /mnt/boot
  fi
  if [[ $(swapon -s | wc -l) -eq 1 ]]; then
    swapon /dev/disk/by-label/swap
  fi
  if [ $ENCRYPT_DISK -eq 1 ]; then
    mkdir -p /mnt/home
    if ! mountpoint -q /mnt/home; then
      mount /dev/disk/by-label/home /mnt/home
    fi
  fi
fi

if [ $VERBOSE -eq 1 ]; then
  fdisk -l "$DISK_PART"
  lsblk -lo NAME,SIZE,TYPE,MOUNTPOINTS,PARTLABEL,UUID
fi

echo -e "${GREEN}================================${NC}"
echo -e "${GREEN}================================${NC}"
echo -e "${BLUE}Create basic configuration...${NC}"
if [ $RPI4_INSTALL -eq 1 ]; then
  nixos-generate-config --no-filesystems
else
  nixos-generate-config --root /mnt --no-filesystems
fi

echo -e "${GREEN}================================${NC}"
echo -e "${GREEN}================================${NC}"
echo -e "${BLUE}Preparing configurations files...${NC}"

if [ $RPI4_INSTALL -eq 1 ]; then
  NIXOS_CONFIG_DIR="/etc/nixos"
fi
install -D -m 644 -t "$NIXOS_CONFIG_DIR"/ "$CURIOS_SRC_PATH"/*.nix
install -D -m 644 -t "$NIXOS_CONFIG_DIR"/modules/ "$CURIOS_SRC_PATH"/modules/*.nix
install -D -m 644 -t "$NIXOS_CONFIG_DIR"/modules/desktop-apps/ "$CURIOS_SRC_PATH"/modules/desktop-apps/*.nix
install -D -m 644 -t "$NIXOS_CONFIG_DIR"/modules/filesystems/ "$CURIOS_SRC_PATH"/modules/filesystems/*.nix
install -D -m 644 -t "$NIXOS_CONFIG_DIR"/modules/hardened/ "$CURIOS_SRC_PATH"/modules/hardened/*.nix
install -D -m 644 -t "$NIXOS_CONFIG_DIR"/modules/hardware/ "$CURIOS_SRC_PATH"/modules/hardware/*.nix
install -D -m 644 -t "$NIXOS_CONFIG_DIR"/modules/platforms/ "$CURIOS_SRC_PATH"/modules/platforms/*.nix
install -D -m 644 -t "$NIXOS_CONFIG_DIR"/pkgs/curios-dotfiles/ "$CURIOS_SRC_PATH"/pkgs/curios-dotfiles/default.nix
install -D -m 644 -t "$NIXOS_CONFIG_DIR"/pkgs/curios-update/ "$CURIOS_SRC_PATH"/pkgs/curios-update/default.nix
install -D -m 555 -t "$NIXOS_CONFIG_DIR"/pkgs/curios-update/bin/ "$CURIOS_SRC_PATH"/pkgs/curios-update/bin/curios-update

# Update user language:
sed "s/i18n\.locale = \".*/i18n.locale = \"${SELECTED_LOCALE}\";/g" -i "$NIXOS_CONFIG_DIR"/settings.nix
# Update console keyboard map:
sed "s/keyboard = \".*/keyboard = \"${SELECTED_LOCALE_CONSOLE}\";/g" -i "$NIXOS_CONFIG_DIR"/settings.nix
# Update time zone
sed "s/timeZone = \".*/timeZone = \"${PC_TIMEZONE//\//\\\/}\";/g" -i "$NIXOS_CONFIG_DIR"/settings.nix
# Update user name
sed "s/users\.users\..*/users.users.${USERNAME} = {/g" -i "$NIXOS_CONFIG_DIR"/user-me.nix
sed "s/users\.users\..*/users.users.${USERNAME} = {/g" -i "$NIXOS_CONFIG_DIR"/settings.nix
sed "s/description = \".*/description = \"${FULLNAME}\";/g" -i "$NIXOS_CONFIG_DIR"/settings.nix
# Update hostname
sed "s/hostname = \".*/hostname = \"${PC_HOSTNAME}\";/g" -i "$NIXOS_CONFIG_DIR"/settings.nix
# platform settings:
if [ $RPI4_INSTALL -eq 1 ]; then
  # Update settings.nix
  sed 's/platform\.rpi4\.enable = .*/platform.rpi4.enable = lib.mkDefault true;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  sed 's/platform\.amd64\.enable = .*/platform.amd64.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  sed 's/filesystems\.luks\.enable = .*/filesystems.luks.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  sed 's/filesystems\.minimal\.enable = .*/filesystems.minimal.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  sed 's/bootefi\.enable = .*/bootefi.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
else
  # Also update settings.nix
  sed 's/platform\.rpi4\.enable = .*/platform.rpi4.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  sed 's/platform\.amd64\.enable = .*/platform.amd64.enable = lib.mkDefault true;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  sed 's/bootefi\.enable = .*/bootefi.enable = lib.mkDefault true;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  # filesystems settings:
  if [ $ENCRYPT_DISK -eq 1 ]; then
    # Update settings.nix
    sed 's/filesystems\.luks\.enable = .*/filesystems.luks.enable = lib.mkDefault true;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
    sed 's/filesystems\.minimal\.enable = .*/filesystems.minimal.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  else
    # Also update settings.nix
    sed 's/filesystems\.luks\.enable = .*/filesystems.luks.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
    sed 's/filesystems\.minimal\.enable = .*/filesystems.minimal.enable = lib.mkDefault true;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  fi
fi
# GPU settings:
if [[ "$INSTALL_GPU" -eq 1 && "$GPU_DETECTED" == "amd" ]]; then
  echo "Enabling AMD GPU..."
  sed 's/amdGpu\.enable = .*/amdGpu.enable = lib.mkDefault true;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
elif [[ "$INSTALL_GPU" -eq 1 && "$GPU_DETECTED" == "nvidia" ]]; then
  echo "Enabling Nvidia GPU..."
  sed 's/nvidiaGpu\.enable = .*/nvidiaGpu.enable = lib.mkDefault true;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
else
  echo "Disabling GPU..."
  sed 's/amdGpu\.enable = .*/amdGpu.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
  sed 's/nvidiaGpu\.enable = .*/nvidiaGpu.enable = lib.mkDefault false;/g' -i "$NIXOS_CONFIG_DIR"/settings.nix
fi

while true; do
  if [ $ASSUME_YES -eq 0 ]; then
    read -r -p "Proceed with installation ? (y/n): " YN
  else
    YN="y"
  fi
  case $YN in
    [yY] ) echo -e "${BLUE}Launching NixOS installer...${NC}";
      if [ $RPI4_INSTALL -eq 1 ]; then
        nixos-rebuild boot
      else
        nixos-install --cores 0 --no-root-passwd
      fi
      if [ $DO_DOTFILES_INSTALL -eq 1 ] && [ $RPI4_INSTALL -eq 0 ]; then
        dotfiles-inst
      fi
      echo -e "${GREEN}Done...${NC}"
      echo -e "${GREEN}You can now reboot.${NC}"
      break;;
    [nN] ) echo "Exiting...";
      exit;;
    * ) echo -e "${RED}Invalid response.${NC}";;
  esac
done
