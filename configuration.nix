# Edit this configuration file to define what should be installed on
# your system. Help is available in the configuration.nix(5) man page, on
# https://search.nixos.org/options and in the NixOS manual (`nixos-help`).
# See: https://nixos.org/manual/nixos/stable/

{ config, lib, pkgs, ... }:

let
  # Following variables can be edited.
  timeZone = "Europe/Paris"; # Change me!!
  #defaultLocale = "en_US.UTF-8"; # Change me!!
  defaultLocale = "fr_FR.UTF-8";
  #defaultConsoleKeymap = "us";
  defaultConsoleKeymap = "fr";
in {
  # Split configurations files, see: https://nixos.wiki/wiki/NixOS_modules
  imports =
    [ # Change me !!
      # A default one could be generated by 'nixos-generate-config --root /mnt' during installation.

      ##################### Step 1: CPU platform #####################
      # Intel platform
      ./hardware-configuration-intel.nix
      # OR AMD platform
      #./hardware-configuration-amd.nix
      # OR Qemu/KVM platform, change me for kvm-intel or kvm-amd.
      #./hardware-configuration-qemu.nix
      # OR Raspberry PI 4 platform - REMOVE every other *.nix imports EXCEPT user-me.nix !
      #./rpi4.nix
      # EFI boot with systemd
      ./boot-efi.nix
      ##################### Step 2: Filesystem #####################
      # LUKS + LVM filesystem as defined by ./install-system.sh --crypt /dev/XXX
      ./filesystems-luks.nix
      # OR minimum filesystem as defined by ./install-system.sh /dev/XXX
      #./filesystems-mini.nix
      ##################### Step 3: GPU #####################
      # Nvidia GPU
      #./nvidia-gpu.nix
      # OR AMD GPU
      #./amd-gpu.nix
      ##################### Step 4: User #####################
      # Me
      ./user-me.nix # change me !
      #./dev-tools.nix # QEMU/KVM + virt-manager, docker, Python3.13 PyCharm, Nmap
      #./ai-tools.nix # Ollama + Open WebUI

      ##################### Optional: Hardening #####################
      # Systemd hardening configurations
      # See: https://github.com/wallago/nix-system-services-hardened
      # Check results with: `systemd-analyze security`
      ./hardened/accounts-daemon.nix
      ./hardened/acipd.nix
      #./hardened/cups.nix
      ./hardened/dbus.nix
      ./hardened/getty.nix
      ./hardened/nix-daemon.nix
      ./hardened/nscd.nix
      ./hardened/rescue.nix
      ./hardened/rtkit.nix
      ./hardened/sshd.nix
      #./hardened/user.nix # 'flatpak run' bug
      # Network
      #./hardened/NetworkManager.nix # proton-vpn bug
      #./hardened/NetworkManager-dispatcher.nix # proton-vpn bug
      ./hardened/wpa_supplicant.nix
    ];

  networking = {
    hostName = "EVAUnit02"; # Change me!!
    #wireless.enable = true;  # Enables wireless support via wpa_supplicant OR
    networkmanager.enable = true;  # Easiest to use and most distros use this by default.
    nameservers = [ "9.9.9.9" "1.1.1.1" "2620:fe::fe" "2620:fe::9" ];
    useDHCP = lib.mkDefault true;
    # Open ports in the firewall.
    #firewall.allowedTCPPorts = [ ... ];
    #firewall.allowedUDPPorts = [ ... ];
    # Or disable the firewall altogether.
    #firewall.enable = false;
  };

  # Set your time zone.
  time.timeZone = timeZone;

  # Configure network proxy if necessary
  #networking.proxy.default = "http://user:password@proxy:port/";
  #networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Select internationalisation properties.
  i18n = {
    defaultLocale = defaultLocale;
    extraLocaleSettings = {
      LC_ADDRESS = defaultLocale;
      LC_IDENTIFICATION = defaultLocale;
      LC_MEASUREMENT = defaultLocale;
      LC_MONETARY = defaultLocale;
      LC_NAME = defaultLocale;
      LC_NUMERIC = defaultLocale;
      LC_PAPER = defaultLocale;
      LC_TELEPHONE = defaultLocale;
      LC_TIME = defaultLocale;
    };
  };

  # Enable the X11 windowing system.
  #services.xserver = {
  #  enable = true;
  #  xkb.layout = defaultConsoleKeymap;
  #  xkb.options = "eurosign:e,caps:escape";
  #};

  console = {
    #font = "Lat2-Terminus16";
    keyMap = defaultConsoleKeymap;
    earlySetup = true; # initrd setup
    useXkbConfig = false; # use xkb.options in tty.
  };

  # Enable CUPS to print documents.
  #services.printing.enable = true;

  # Enable sound.
  #services.pulseaudio.enable = true;
  # OR
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    pulse.enable = true;
  };
  security.rtkit.enable = true; # realtime scheduling priority for pipewire.

  # Enable touchpad support (enabled default in most desktopManager).
  #services.libinput.enable = true;

  # ZSH
  programs.zsh = {
    enable = true;
    enableCompletion = true;
    autosuggestions.enable = true;
    syntaxHighlighting.enable = true;
  };
  users.defaultUserShell = pkgs.zsh;
  # minimalistic default zshrc
  environment.etc."skel/.zshrc".text = ''
    autoload -Uz promptinit && promptinit
  '';

  # Env packages
  environment.pathsToLink = [
    "/share/backgrounds"
    "/share/cosmic"
  ];

  # Env variables
  environment.sessionVariables = {
    # Hint Electron apps to use Wayland
    NIXOS_OZONE_WL = "1";
  };

  # List packages installed in system profile.
  # You can use https://search.nixos.org/ to find more packages (and options).
  environment.systemPackages = with pkgs; [
    # Basics
    wget
    curl
    fastfetch
    killall
    git
    jq # JSON parser
    # For Yazi
    fzf # fuzzy finder
    # ripgrep
    # chafa # Terminal images preview
    # Modern terminal tools
    eza # ls replacement
    bat # cat replacement
    btop # top replacement
    duf # df replacement
    dust # du replacement
    fd # find alternative

    gnupg

    # Alacritty terminal
    alacritty
    # alacritty-theme

    # COSMIC
    # See: https://github.com/lilyinstarlight/nixos-cosmic/blob/main/nixos/cosmic/module.nix
    adwaita-icon-theme
    alsa-utils
    cosmic-ext-tweaks
    fontconfig
    freetype
    hicolor-icon-theme
    lld
    playerctl
    pop-icon-theme
    pop-launcher
    xdg-user-dirs

    # 3rd party apps
    brave
    signal-desktop
    yubioath-flutter
    #remmina
    easyeffects
    caligula
  ];

  # Enabling xdg desktop integration
  xdg.portal = {
    enable = true;
    extraPortals = with pkgs; [
      xdg-desktop-portal-cosmic
      xdg-desktop-portal-gtk
    ];
    configPackages = with pkgs; [
      xdg-desktop-portal-cosmic
    ];
  };

  # Look and feel
  fonts.packages = with pkgs; [
     dejavu_fonts
     fira
     font-awesome
     jetbrains-mono
     noto-fonts
     noto-fonts-color-emoji
     open-sans
  ];
  fonts.fontDir.enable = true;

  # Cosmic Desktop Env
  services.desktopManager.cosmic.enable = true;
  services.displayManager.cosmic-greeter.enable = true;
  services.desktopManager.cosmic.xwayland.enable = true;

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  #programs.mtr.enable = true;
  #programs.gnupg.agent = {
  #  enable = true;
  #  enableSSHSupport = true;
  #};

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  services.openssh = {
    enable = true;
    settings = {
      PermitRootLogin = "no";
      StrictModes = true;
      PasswordAuthentication = false; # Set users.users.<name>.openssh.authorizedKeys.keys to your ssh pubkey
      KbdInteractiveAuthentication = false;
      PrintMotd = true;
      UsePAM = true;
      X11Forwarding = false;
    };
  };
  programs.ssh.startAgent = true;

  # Enabling Flatpak
  services.flatpak.enable = true;
  # Flatpak system, add repo
  #systemd.services.flatpak-repo = {
  #  wantedBy = [ "multi-user.target" ];
  #  #path = [ pkgs.flatpak ];
  #  script = ''
  #    /run/current-system/sw/bin/flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
  #    /run/current-system/sw/bin/flatpak remote-add --if-not-exists cosmic https://apt.pop-os.org/cosmic/cosmic.flatpakrepo
  #  '';
  #};
  # Flatpak user auto update
  # systemctl --user list-units --type=service
  systemd.user.services.flatpak-update = {
    enable = true;
    description = "Flatpak user update";
    after = [ "network-online.target" ];
    wants = [ "network-online.target" ];
    #path = [ pkgs.flatpak ];
    serviceConfig = {
      Type = "oneshot";
      ExecStart = "/run/current-system/sw/bin/flatpak update --noninteractive --assumeyes";
    };
    wantedBy = [ "default.target" ];
  };
  # systemctl --user list-timers
  # systemctl --user status flatpak-update.timer
  systemd.user.timers.flatpak-update = {
    enable = true;
    description = "Flatpak user update";
    timerConfig = {
      OnBootSec = "2m";
      OnActiveSec = "2m";
      OnUnitInactiveSec = "24h";
      OnUnitActiveSec = "24h";
      AccuracySec = "1h";
      RandomizedDelaySec = "10m";
    };
    wantedBy = [ "timers.target" ];
  };

  # Enabling PCSC-lite for Yubikey
  services.pcscd.enable = true;

  # Required features
  #hardware.graphics.enable = true;
  services.libinput.enable = true;
  xdg.mime.enable = true;
  xdg.icons.enable = true;

  # Optionnal features
  #hardware.bluetooth.enable = true;
  services.acpid.enable = true;
  services.gnome.gnome-keyring.enable = true;
  programs.dconf.enable = true;
  programs.gnome-disks.enable = true;
  # Fast terminal file manager
  #programs.yazi = {
  #  enable = true;
  #};

  # Required dbus services
  services.accounts-daemon.enable = true;
  services.upower.enable = true;
  security.polkit.enable = true;
  services.power-profiles-daemon.enable = true;
  services.geoclue2.enable = true;

  # Allow unfree packages
  #nixpkgs.config.allowUnfree = true;

  # Automatic OS updates and cleanup
  system.autoUpgrade.enable = true;
  system.autoUpgrade.dates = "03:40";
  # Reboot on new kernel, initrd or kernel module.
  #system.autoUpgrade.allowReboot = true;
  # Collect garbage
  nix.gc.automatic = true;
  nix.gc.dates = "daily";
  nix.gc.options = "--delete-older-than 7d";
  nix.settings.auto-optimise-store = true;

  # Copy the NixOS configuration file and link it from the resulting system
  # (/run/current-system/configuration.nix). This is useful in case you
  # accidentally delete configuration.nix.
  # system.copySystemConfiguration = true;

  # This option defines the first version of NixOS you have installed on this particular machine,
  # and is used to maintain compatibility with application data (e.g. databases) created on older NixOS versions.
  #
  # Most users should NEVER change this value after the initial install, for any reason,
  # even if you've upgraded your system to a new NixOS release.
  #
  # This value does NOT affect the Nixpkgs version your packages and OS are pulled from,
  # so changing it will NOT upgrade your system - see https://nixos.org/manual/nixos/stable/#sec-upgrading for how
  # to actually do that.
  #
  # This value being lower than the current NixOS release does NOT mean your system is
  # out of date, out of support, or vulnerable.
  #
  # Do NOT change this value unless you have manually inspected all the changes it would make to your configuration,
  # and migrated your data accordingly.
  #
  # For more information, see `man configuration.nix` or https://nixos.org/manual/nixos/stable/options#opt-system.stateVersion .
  system.stateVersion = "25.05"; # Did you read the comment?

}
