# Do NOT Edit this file - it was generated by 'nixcosmic-install'
# and may be overwritten by future updates. Users can edit settings.nix instead.

{ config, lib, pkgs, ... }:

{
  # Split configurations files, see: https://nixos.wiki/wiki/NixOS_modules
  imports = [
    ##################### Step 1: Hardware #####################
    # Include the results of the hardware scan.
    # You could re-generated one with 'sudo nixos-generate-config --no-filesystems'.
    # For hardware related configurations, see: https://github.com/NixOS/nixos-hardware
    # Do NOT edit
    ./hardware-configuration.nix
    ##################### Step 2: Modules #####################
    # Import all modules, activate or deactivate them in settings.nix
    ./modules/default.nix
    ##################### Step 3: User #####################
    # Me
    ./user-me.nix
    # User custom settings
    ./settings.nix
  ];

  # updated by nixcosmic-install
  networking.hostName = config.nixcosmic.system.hostname;

  ############# Settings belows this line should not be changed! #############

  # Set time zone.
  time.timeZone = config.nixcosmic.system.timeZone;

  # Select internationalisation properties. See 'locale' and 'locale -a'
  i18n = {
    defaultLocale = config.nixcosmic.system.i18n.locale;
    extraLocales = "all"; # Support all glibc locales
    extraLocaleSettings = {
      LC_ADDRESS = config.nixcosmic.system.i18n.locale;
      LC_IDENTIFICATION = config.nixcosmic.system.i18n.locale;
      LC_MEASUREMENT = config.nixcosmic.system.i18n.locale;
      LC_MONETARY = config.nixcosmic.system.i18n.locale;
      LC_NAME = config.nixcosmic.system.i18n.locale;
      LC_NUMERIC = config.nixcosmic.system.i18n.locale;
      LC_PAPER = config.nixcosmic.system.i18n.locale;
      LC_TELEPHONE = config.nixcosmic.system.i18n.locale;
      LC_TIME = config.nixcosmic.system.i18n.locale;
    };
    #inputMethod = {
    #  type = "fcitx5";
    #  enable = true;
    #  fcitx5.waylandFrontend = true;
    #  fcitx5.addons = with pkgs; [
    #    fcitx5-gtk
    #    fcitx5-chinese-addons  # table input method support
    #    fcitx5-nord            # a color theme
    #  ];
    #};
  };

  console = {
    keyMap = config.nixcosmic.system.keyMap;
    earlySetup = true; # initrd setup
    useXkbConfig = false; # use xkb.options in tty.
  };

  # List packages installed in system profile.
  # You can use https://search.nixos.org/ to find more packages (and options).
  environment.systemPackages = with pkgs; [
    # Basics
    wget
    curl
    fastfetch
    killall
    git
    gnupg
    pinentry-curses
    gnused
    pciutils
  ]
  ++ lib.optionals config.services.desktopManager.cosmic.xwayland.enable [
    wl-clipboard
  ]
  ++ (
    if config.nixcosmic.hardware.amdGpu.enable then
      [ btop-rocm ]
    else
      if config.nixcosmic.hardware.nvidiaGpu.enable then
        [ btop-cuda ]
      else
        [ btop ]
  );

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  #programs.mtr.enable = true;
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = false; # Let's programs.ssh.startAgent do this job
    pinentryPackage = pkgs.pinentry-curses;
  };

  # Enabling Linux AppImage
  #programs.appimage.enable = true;
  #programs.appimage.binfmt = true;

  # Allow unfree packages, could be overridden by some modules.
  nixpkgs.config.allowUnfree =
    if config.nixcosmic.hardware.nvidiaGpu.enable then
      true
    else
      if config.nixcosmic.desktop.apps.gaming.enable then
        true
      else
        false
  ;

  system = {
    # Automatic OS updates and cleanup
    autoUpgrade = {
      enable = true;
      dates = "03:40";
      randomizedDelaySec = "10min";
      #allowReboot = true; # Reboot on new kernel, initrd or kernel module.
    };
    # NixCOSMIC variant version
    nixos.variantName = "NixCOSMIC";
    nixos.variant_id = "unstable";
  };

  # Collect garbage
  nix = {
    gc = {
      automatic = true;
      dates = "daily";
      options = "--delete-older-than 7d";
    };
    settings = {
      auto-optimise-store = true;
      # Allowing Flakes
      experimental-features = [ "nix-command" "flakes" ];
    };
  };

  # Copy the NixOS configuration file and link it from the resulting system
  # (/run/current-system/configuration.nix). This is useful in case you
  # accidentally delete configuration.nix.
  #system.copySystemConfiguration = true;

  # This option defines the first version of NixOS you have installed on this particular machine,
  # and is used to maintain compatibility with application data (e.g. databases) created on older NixOS versions.
  #
  # Most users should NEVER change this value after the initial install, for any reason,
  # even if you've upgraded your system to a new NixOS release.
  #
  # This value does NOT affect the Nixpkgs version your packages and OS are pulled from,
  # so changing it will NOT upgrade your system - see https://nixos.org/manual/nixos/stable/#sec-upgrading for how
  # to actually do that.
  #
  # This value being lower than the current NixOS release does NOT mean your system is
  # out of date, out of support, or vulnerable.
  #
  # Do NOT change this value unless you have manually inspected all the changes it would make to your configuration,
  # and migrated your data accordingly.
  #
  # For more information, see `man configuration.nix` or https://nixos.org/manual/nixos/stable/options#opt-system.stateVersion .
  system.stateVersion = "25.05"; # Did you read the comment?
}
