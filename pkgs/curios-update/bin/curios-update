#!/usr/bin/env bash

# CuriOS update script as NixOS package.
#
# Usage:
#       curios-update [options]
# Options:
#     -h, --help         Print this message.
#     --check            Check online if a most recent version of CuriOS exist.
#     --upgrade          Download latest CuriOS and install it. Implies --check option.
#     -v, --verbose      Print more information.
#     --version          Print version number and exit.
#
# Examples:
#    Check online for the latest version:
#      curios-update --check
#    Upgrade system:
#      curios-update --upgrade

set -eu

#------------- Colors -------------#
readonly RED="\033[31;1m"          # Red and bold
readonly GREEN="\033[32;1m"        # Green and bold
readonly BLUE="\033[34;1m"         # Blue and bold
readonly GREY="\033[37;1m"         # Grey and bold
readonly YELLOW="\033[33;1;3m"     # Yellow, bold and italic
readonly YELLOWBLK="\033[33;1;5m"  # Yellow, bold and slow blink
readonly UNDL="\033[4m"            # Underlined
readonly BOLD="\033[1m"            # Bold
readonly NC="\033[0m"              # No Color

#------------- Print help function
usage () {
  echo -e "Usage: curios-update [options]

Options:
  ${GREY}-h, --help${NC}         Print this message.
  ${GREY}--check${NC}            Check online if a most recent version of CuriOS exist.
  ${GREY}--upgrade${NC}          Download latest CuriOS and install it. Implies --check option.
  ${GREY}-v, --verbose${NC}      Print more information.
  ${GREY}--version${NC}          Print version number and exit.

Examples:
  Check online for the latest version:
    ${GREY}curios-update --check${NC}
  Upgrade system:
    ${GREY}curios-update --upgrade${NC}"
  exit 0
}

#------------- var init state
readonly VERSION="0.2";
VERBOSE=0;
CHECK_ONLINE=0;
UPGRADE_SYSTEM=0;
UPGRADABLE=0;
LATEST_VERSION="";
LATEST_SOURCE="";
SCRIPT_PATH="$(dirname "$0")"

#------------- Scripts arguments parse options
ARGS=$(getopt --longoptions="verbose,version,help,check,upgrade" --options ":hv" -- "$@")
if [ $# -eq 0 ]; then
  usage
fi;

eval set -- "$ARGS"

while true; do
  case "$1" in
    -v | --verbose)
      VERBOSE=1
      shift
      ;;
    -h | --help)
      usage
      ;;
    --check)
      CHECK_ONLINE=1
      shift
      ;;
    --upgrade)
      UPGRADE_SYSTEM=1
      CHECK_ONLINE=1
      shift
      ;;
    --version)
      echo "$VERSION"
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

if [ $VERBOSE -eq 1 ]; then
  echo "Script current path: ${SCRIPT_PATH}"
fi

# This script must be run as root for --upgrade option
if [ "$EUID" -ne 0 ] && [ $UPGRADE_SYSTEM -eq 1 ]; then
  echo -e "${RED}This script MUST be run as root: sudo curios-update --upgrade${NC}" >&2
  exit 1
fi

# Check dependencies
available() { command -v "$1" >/dev/null; }

if ! available notify-send; then
  echo -e "${RED}notify-send command not found!${NC}"
  exit 2
fi

# check online latest version
get_latest_version() {
  if [ $VERBOSE -eq 1 ]; then
    echo "Checking github sources..."
  fi
  LATEST_VERSION="$(curl -f --silent "https://api.github.com/repos/VideoCurio/nixos-configuration/tags" | jq -r '.[0].name')"
  LATEST_SOURCE="$(curl -f --silent "https://api.github.com/repos/VideoCurio/nixos-configuration/tags" | jq -r '.[0].tarball_url')"
}

# Upgrade the system
upgrade_curios() {
  local extracted_source_path=""

  echo -e "${GREEN}Downloading ${LATEST_VERSION} sources...${NC}"
  wget -O /tmp/CuriOS-"${LATEST_VERSION}".tar.gz --show-progress "$LATEST_SOURCE"
  mkdir -p /tmp/CuriOS-"${LATEST_VERSION}"/ && tar -C /tmp/CuriOS-"${LATEST_VERSION}"/ -xzf /tmp/CuriOS-"${LATEST_VERSION}".tar.gz
  extracted_source_path=$(fd --min-depth 1 --max-depth 1 --type d . /tmp/CuriOS-"${LATEST_VERSION}"/ | head -n 1)
  echo "Sources extracted to ${extracted_source_path}"
  # Checking extracted source
  if [ ! -f "$extracted_source_path"/configuration.nix ]; then
    echo -e "${RED}configuration.nix file not found!${NC}"
    exit 1
  fi

  # Installing
  echo -e "${GREEN}Installing update...${NC}"
  install -D -m 644 -t /etc/nixos/ "$extracted_source_path"/configuration.nix
  if [ ! -f /etc/nixos/user-me.nix ]; then
    install -D -m 644 -t /etc/nixos/ "$extracted_source_path"/user-me.nix
  fi
  if [ ! -f /etc/nixos/settings.nix ]; then
    install -D -m 644 -t /etc/nixos/ "$extracted_source_path"/settings.nix
  fi
  install -D -m 555 -t /etc/nixos/ "$extracted_source_path"/curios-*
  mkdir -p /etc/nixos/modules/
  cp -r -f "$extracted_source_path"/modules/ /etc/nixos/
  mkdir -p /etc/nixos/pkgs/
  cp -r -f "$extracted_source_path"/pkgs/ /etc/nixos/
  /run/current-system/sw/bin/nixos-rebuild switch --upgrade
  echo -e "${GREEN}Done.${NC}"
}

# Get current OS version
if [ ! -f /etc/os-release ]; then
  echo -e "${RED}/etc/os-release file not found!${NC}"
  exit 1
fi
source /etc/os-release
#VARIANT_ID="unstable"
echo -e "CuriOS current version is ${GREY}${VARIANT_ID}${NC}"

if [ $CHECK_ONLINE -eq 1 ]; then
  get_latest_version
  echo -e "CuriOS latest version is ${GREY}${LATEST_VERSION}${NC}"
  if [ "$LATEST_VERSION" == "$VARIANT_ID" ]; then
    echo -e "${GREEN}System is up-to-date.${NC}"
    exit 0
  else
    if [[ "$LATEST_VERSION" == [0-9][0-9]* ]]; then
      UPGRADABLE=1;
      echo -e "${YELLOW}System should be upgraded.${NC}"
      if [ "$EUID" -ge 900 ]; then
        /run/current-system/sw/bin/notify-send -a "CuriOS Updater" --urgency=critical "CuriOS ${LATEST_VERSION} is available." "In a terminal type: sudo curios-update --upgrade"
      fi
    else
      UPGRADABLE=0;
      echo -e "${YELLOW}Latest version number is not correct.${NC}"
    fi
  fi
fi

if [ $UPGRADABLE -eq 1 ] && [ $UPGRADE_SYSTEM -eq 1 ]; then
  upgrade_curios
fi
